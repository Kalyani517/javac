/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication13;

/**
 *
 * @author peru_16
 */
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.JTextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.Timer;



public class Suduko_GUI extends javax.swing.JFrame {

    private JTextField[][] sudokuFields;
   
    private JButton jButtonGenerate, jButtonCheck;

    /**
     * Creates new form Suduko_GUI
     */
    public Suduko_GUI() {
        initComponents();
        runBanner(); 
    }
    
    
    private void runBanner() {
    Timer t = new Timer(300, new ActionListener() {
        String bannerText = "Thanks for Playing this Game.....  Made by Prerna....   "; // Static base banner
        int pos = 0;

        @Override
        public void actionPerformed(ActionEvent e) {
            // Shift one character to the left like a moving banner
            String display = bannerText.substring(pos) + bannerText.substring(0, pos);
            jLabel1.setText(display);
            pos = (pos + 1) % bannerText.length();
        }
    });
    t.start();
}


   
   private void generateSudokuGrid(int size) {
    // Clear the previous grid if any
    sudokuPanel.removeAll();
    sudokuFields = new JTextField[size][size];

    // Set a grid layout with gaps for better spacing between cells
    sudokuPanel.setLayout(new GridLayout(size, size, 5, 5)); // 5 pixels gap between rows and columns

    // Initialize the Sudoku grid
    int[][] grid = new int[size][size];
    int[] firstRow = new int[size];
    for (int i = 0; i < size; i++) firstRow[i] = i + 1;

    Random random = new Random();
    for (int i = size - 1; i > 0; i--) {
        int j = random.nextInt(i + 1);
        int temp = firstRow[i];
        firstRow[i] = firstRow[j];
        firstRow[j] = temp;
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            grid[i][j] = firstRow[(j + i) % size];
        }
    }

    int toRemove = (size * size) / 3;
    while (toRemove > 0) {
        int row = random.nextInt(size);
        int col = random.nextInt(size);
        if (grid[row][col] != 0) {
            grid[row][col] = 0;
            toRemove--;
        }
    }

    // Create text fields for the Sudoku grid
    Font font = new Font("Arial", Font.BOLD, 22);
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            JTextField textField = new JTextField();
            textField.setHorizontalAlignment(SwingConstants.CENTER);
            textField.setFont(font);
            textField.setOpaque(true);
            textField.setBackground(Color.WHITE);
            textField.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));

            if (grid[i][j] != 0) {
                textField.setText(String.valueOf(grid[i][j]));
                textField.setEditable(false);
                textField.setBackground(new Color(230, 230, 230)); // Light gray for non-editable cells
            }

            sudokuFields[i][j] = textField;
            sudokuPanel.add(textField);
        }
    }

    // Refresh the panel to display the new grid
    sudokuPanel.revalidate();
    sudokuPanel.repaint();
}

    
     private void checkSudokuSolution() {
        int size = sudokuFields.length;

        int[][] grid = new int[size][size];

        try {
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    String text = sudokuFields[i][j].getText().trim();
                    if (text.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Some cells are empty!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    int value = Integer.parseInt(text);
                    if (value < 1 || value > 9) {
                        JOptionPane.showMessageDialog(this, "Invalid number at (" + (i + 1) + "," + (j + 1) + ")", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    grid[i][j] = value;
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "All cells must contain numbers!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isValidSudoku(grid)) {
            JOptionPane.showMessageDialog(this, "üéâ Correct solution!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "‚ùå Incorrect solution. Try again!", "Oops", JOptionPane.WARNING_MESSAGE);
        }
    }

    private boolean isValidSudoku(int[][] board) {
    int size = board.length;

    for (int i = 0; i < size; i++) {
        boolean[] rowCheck = new boolean[size];
        boolean[] colCheck = new boolean[size];
        for (int j = 0; j < size; j++) {
            int rowVal = board[i][j] - 1;
            int colVal = board[j][i] - 1;

            if (rowVal < 0 || rowVal >= size || colVal < 0 || colVal >= size)
                return false;

            if (rowCheck[rowVal] || colCheck[colVal])
                return false;

            rowCheck[rowVal] = true;
            colCheck[colVal] = true;
        }
    }

    // Box validation skipped here ‚Äî box logic depends on standard Sudoku (like 3x3 in 9x9).
    return true;
}





    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        sudokuPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        checkButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 700));

        javax.swing.GroupLayout sudokuPanelLayout = new javax.swing.GroupLayout(sudokuPanel);
        sudokuPanel.setLayout(sudokuPanelLayout);
        sudokuPanelLayout.setHorizontalGroup(
            sudokuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        sudokuPanelLayout.setVerticalGroup(
            sudokuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );

        jButton1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jButton1.setText("Generate Suduko");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.setHideActionText(true);
        jButton1.setPreferredSize(new java.awt.Dimension(143, 50));
        jButton1.setVerifyInputWhenFocusTarget(false);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setPreferredSize(new java.awt.Dimension(50, 50));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("Liberation Sans", 1, 16)); // NOI18N
        jTextField2.setText("Enter size of Sudoku");
        jTextField2.setPreferredSize(new java.awt.Dimension(150, 50));

        checkButton.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        checkButton.setText("check");
        checkButton.setPreferredSize(new java.awt.Dimension(72, 50));
        checkButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Liberation Sans", 2, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Sudoku Instructions :\n\n 1. Each row must contain all numbers \n   from 1 to N with no repeats.\n\n 2.   Each column must contain all \n numbersf rom 1 to N with no repeats.");
        jScrollPane2.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Thanks for playing this Game .........     Made By Prerna");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(sudokuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2280, 2280, 2280))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2319, 2319, 2319))))
            .addGroup(layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(227, 227, 227)
                        .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sudokuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
    int size = Integer.parseInt(jTextField1.getText().trim());

    if (size < 1 || size > 25) {
        JOptionPane.showMessageDialog(this, "Enter a size between 1 and 25", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    generateSudokuGrid(size);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "Please enter a valid number!", "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_jButton1ActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
      checkSudokuSolution();   
// TODO add your handling code here:
    }//GEN-LAST:event_checkButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Suduko_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Suduko_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Suduko_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Suduko_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               Suduko_GUI gui = new Suduko_GUI();
                gui.pack(); // Automatically size window based on components
                gui.setLocationRelativeTo(null); // Center the window
                gui.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JPanel sudokuPanel;
    // End of variables declaration//GEN-END:variables
}
